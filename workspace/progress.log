4/16/14

Was able to build SMSD from scratch which let me avoid having the cmd and gui packages. More importantly I didn't have to package the cdk as part of the smsd jar. 

Using the small SMSD.jar I just generated (and cdk 1.5.6) I was able to build MCS without errors.

With MCS.jar and cdk 1.5.4 (note the difference) I was able to build Ammolite and successfully compress an sdf file. When I tried to use a version built with cdk 1.5.6 I got a not serializable exception. 

Using Ammolite built with cdk 1.5.4 to try and aggregate the database I got this error java.lang.NoClassDefFoundError: org/openscience/smsd/Isomorphism. Guessing I just need the SMSD.jar in Ammolite's dependencies.

Well, no more NoClassDefFoundError. Now I'm getting this 

Apr 16, 2014 12:00:41 PM uk.ac.ebi.reactionblast.tools.ExtAtomContainerManipulator percieveAtomTypesAndConfigureAtoms
WARNING: Failed to find Matching AtomType! Cjava.lang.NullPointerException
Apr 16, 2014 12:00:41 PM uk.ac.ebi.reactionblast.tools.ExtAtomContainerManipulator percieveAtomTypesAndConfigureAtoms
WARNING: Failed to find Matching AtomType! Cjava.lang.NullPointerException
Apr 16, 2014 12:00:41 PM uk.ac.ebi.reactionblast.tools.ExtAtomContainerManipulator percieveAtomTypesAndConfigureAtoms
WARNING: Failed to find Matching AtomType! Cjava.lang.NullPointerException
java.util.concurrent.ExecutionException: java.lang.NullPointerException

lots and lots of times. I can still compress an sdf though.

About 1/3 of the time I'm not getting the above exception; I'm getting null pointers in mcs.smsd.mySize() To try and find why I'm adding some runtime exceptions.

Turns out the Isomorphism isn't getting initialized sometimes...? This happens every time if I only use one thread.

4/28/14

Looking for a java profiler tool and learning how to use it. May have fixed the above errors but I'm not sure yet, certainly doesn't seem to be any faster...

Spent most of the day building a jUnit test. Mostly really frustrating but I think I have a lead of sorts. FMCSj is returning an overlap for caffeine and viagra with 11 atoms, this is the correct size for 2 atom/bond mismatches (and also about the right runtime) .

Nope. Turns out I just wasn't stripping the hydrogens. Ended up with a runtime of about 500ms on average.

4/29/14

Progress. Figured out that once I stripped the hydrogens runtime for SMSD dropped to ~100 ms. Trying different filters/booleans now to see if it can go even lower.

bondSensitive	ringMatch	sM 	fM 	eM 	Time
true			false		T 	T 	T 	100ms
false 			false 		T 	T 	T 	330ms
true 			true 		T  	T   T   100ms
false 			true 		T  	T   T   100ms
true			true 		F 	T 	T 	92ms
true			true 		F 	F 	T 	83ms
true			true 		F 	F 	F 	83ms
true			false 		F 	F 	F 	92ms

so this is pretty good. I'm going to try and aggregate some stuff and see how it goes.

Compatibility issues. Fix it later...

Trying out molecule structs instead of molecules:

bondSensitive	ringMatch	sM 	fM 	eM 	Time
true			false		T 	T 	T 	18,981ms
false 			false 		T 	T 	T 	
true 			true 		T  	T   T   
false 			true 		T  	T   T   
true			true 		F 	T 	T 	
true			true 		F 	F 	T 	
true			true 		F 	F 	F 	348ms
true			false 		F 	F 	F 	
false 			false 		F 	F 	F 	slooooooooooow
false			true 		F 	F 	F 	347ms

FMCS performance
molecules: 780ms
structures: 1,722ms
GraphMCS (only works on structs): 1,405ms

4/30/14

Got SMSD to work appreciably fast. Around 30-50ms on cyclicStructs. Also got aggregation clustering working and built a nifty module to show cluster hierarchy.

Aggregation search seems like it might have some issues, also I haven't tried clustering anything big yet. Started compressing 1k on ent at ~3:30 

Should take something on the order of 5e5 * 3e-2 / 20 = 15e3 / 20 = 7500s * (1m/60s) * (1h/60s) ~= 3h 

5/2/14

So... 

Aggregation clustering on the 1k database took about 4 seconds per comparison. My best guess is that there are a few pathological pairings that take hours. To test that theory I reimplemented timedCalculate (now it hides the timeout exception) and reran aggregation with a max time of 2s per MCS; this should finish in a few hours.

But on the chance that aggregation is still too slow I took another look at the (pseudo) linear aggregation I built. To recap this approach doesn't try to find the closest pair of clusters. It just attempts to add clusters to each other until it gets lucky (which is faster because it will only rarely compute every possible distance).

I built single and multithreaded versions which work the same way conceptually but the multithreaded one is less deterministic. ON my laptop the multithreaded is a little slower but that could easily be because of a high start up cost which would be mitigated on big runs.

5/6/14

Lots of debugging and various stuff. MCS seems a lot slower on ent when compressing 1k I added timed run to MCS (2 second max) which helps. I also built a pseudo linear version which doesn't try to build good clusters, it just tries to build clusters. This is a lot faster.

Currently running a big script on ent which aggregates at a lot of different cluster strictnesses then searches the clusters at different thresholds and cluster strictnesses.

Should provide enough data to tune one or two big runs. whoch will give us timing and accuracy.

5/20/14

Davids-MacBook-Air-3:MolSearch DC$ ./Ammolite test-mcs -f molecule_sets/smalls/100_random_molecules.sdf 
Did 4950 comparisons of molecules in 159116ms Average time: 32
Did 4950 comparisons of structures in 492988ms Average time: 99

5/27/14

Wrote a paper for 6.100 that outlines where the program is currently and how it works
Also did some other stuff....

Right now I'm starting to use jProfiler to find slow spots in FMCSj. Here's where things are with 30_random_molcules.sdf

With tuning:   	Did 435 comparisons of molecules in 102276ms with FMCS. Average time: 235
Without tuning: Did 435 comparisons of molecules in 186671ms with FMCS. Average time: 429

6/12/14 

In Philly and getting to work. Starting by looking at FMCS to see if I can't tune it up some. My first approach is just profiling the version I have running now and cleaning up hot spots. Once I get internet access I'll probably end up modifying the source code for fMCSr (the original) to see if I can figure out how many times it recurses, etc. Might also play with IsoRank to see if I can make it more accurate. 

Pretuning results:

Did 435 comparisons of molecules in 185058ms with FMCS. 	Average time: 425
Did 435 comparisons of molecules in 9706ms with SMSD. 		Average time: 22
Did 435 comparisons of structures in 12510ms with SMSD. 	Average time: 28
Did 435 comparisons of structures in 9010ms with IsoRank. 	Average time: 20

With simple hot spot clean up (only on FMCS, base line results for IsoRank):

Did 435 comparisons of molecules in 104475ms with FMCS. Average time: 240
Did 435 comparisons of molecules in 9236ms with SMSD. Average time: 21
Did 435 comparisons of structures in 12620ms with SMSD. Average time: 29
Did 435 comparisons of structures in 9397ms with IsoRank. Average time: 21
Compared results from SMSD and IsoRank.
IsoRank found a larger mcs 197 times.
SMSD found a larger mcs 182 times.
They found the same size mcs 56 times.
The mcs found were one off 92 times
The mcs found were two off 95 times
The mcs found were more than two off 248 times

More complicated hot spots to look at:

MCS Iterator
MCSMap.containsVal
cdk.bond.contains
MCSList.init
FMCS.compatible

Might have found a bug while trying to play with MCSList. When intialized from an ArrayList MCSList put each atom into a table with their index rather than counting the number of times each atom occurred.

Did 435 comparisons of molecules in 114429ms with FMCS. Average time: 263
Did 435 comparisons of molecules in 9453ms with SMSD. Average time: 21
Did 435 comparisons of structures in 12593ms with SMSD. Average time: 28
Did 435 comparisons of structures in 5944ms with IsoRank. Average time: 13

Well it actually got slower. That sucks.

Did 4950 comparisons of molecules in 1746448ms with FMCS. Average time: 352
Did 4950 comparisons of molecules in 139913ms with SMSD. Average time: 28
Did 4950 comparisons of structures in 296700ms with SMSD. Average time: 59
Did 4950 comparisons of structures in 75695ms with IsoRank. Average time: 15
Compared results from SMSD and IsoRank.
IsoRank found a larger mcs 1629 times.
SMSD found a larger mcs 2282 times.
They found the same size mcs 1039 times.
The mcs found were one off 1258 times
The mcs found were two off 867 times
The mcs found were more than two off 2825 times

6/13/14

Did 31125 comparisons of molecules in 9,233,036ms with FMCS. Average time: 296
Did 31125 comparisons of molecules in 1,832,626ms with SMSD. Average time: 58
Did 31125 comparisons of structures in 6,054,028ms with SMSD. Average time: 194
Did 31125 comparisons of structures in 532,753ms with IsoRank. Average time: 17
Compared results from SMSD and IsoRank.
IsoRank found a larger mcs 11308 times.
SMSD found a larger mcs 14108 times.
They found the same size mcs 5,709 times.
The mcs found were one off 7,700 times
The mcs found were two off 4,494 times
The mcs found were more than two off 18,931 times

TODO: compare SMSD and FMCS results. Maybe a better FMCS result is possible with time out?

6/16/14

I've been working with IsoRank a lot today but I'm running into some frustrating errors (Stuff not printing out, not sure why). I'll leave it for now as it's close to practice but I'll come back to it later.

6/17/14 2:30 PM -> 4:35

Glad I left off until today. I was piping my output into a file so I only ever saw the error output. Took about three seconds to figure out.

Also fixed the overflow bug in about 3 seconds. I'm running the AC today, I wonder if that helps me think.

The mapping eigenvector in IsoRank is all zeros, always. Investigating. 

Not the iterative building process (I think). The standard eigen vector process gives all zeros except for the first element which is one. 

My best guess is that the problem with IsoRank is still in the double indexing of the matrices. I really have no idea what that means.

So the internet stopped working... Got it back.

Currently exploring the matlab implementation. Looks like there's a lot about matlba I don't get. Also looking at the canonical pagerank algorithm.

Thought I was getting somewhere but it doesn't seem like it. Over and out for now. I'll try looking at this for a an hour or so tonight then ask Noah for more help.

6/18/14 3:00 PM -> 4:40 PM, 5:10 PM -> 6:10 PM 

Starting up with reading through the matlab code for isoRank again.

Here's my current approach:

I'm going to download matlab and compare output from a few test cases. This is opposed to reading through a lot of matlab code and getting bogged down in a lot of linear algebra I don't understand. Downside might be that I don't understand what's happening even after I run test cases. 

Matlab will take a little while (like 2 days, the internet here is really slow) to download so in the meantime I'm going to start modifying the C++/R implementation of fMCSr to see if I can get some diagnostics. Basically the same approach as above. Let's see how it plays out.

6/19/14 12:30 PM -> 1:50 PM 3:40 PM -> 4:50 PM

Got matlab up and running, now working on isoRank.

Looks like I got a strong correlation between isoRank and SMSD on the 30 set. I'm trying the 100 set now but unfortunatley the implementation is pretty naive so I managaged to slow it down to about 800ms a call. I think a faster implementation will fix that though. 




